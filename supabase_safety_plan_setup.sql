-- ===================================
-- SAFETY PLAN SYSTEM - DATABASE SETUP
-- ===================================
-- Run this script in your Supabase SQL Editor

-- Drop existing tables if they exist (for clean setup)
DROP TABLE IF EXISTS public.safety_plan_items CASCADE;
DROP TABLE IF EXISTS public.safety_plan_contacts CASCADE;
DROP TABLE IF EXISTS public.safety_plan_sections CASCADE;
DROP TABLE IF EXISTS public.safety_plans CASCADE;

-- ===================================
-- 1. SAFETY PLANS TABLE
-- ===================================
-- Main safety plan for each user
CREATE TABLE public.safety_plans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    last_reviewed_at TIMESTAMPTZ DEFAULT NOW(),
    is_shared_with_therapist BOOLEAN DEFAULT false,
    therapist_email TEXT,
    notes TEXT
);

-- ===================================
-- 2. SAFETY PLAN SECTIONS TABLE
-- ===================================
-- Predefined section types for safety plans
CREATE TABLE public.safety_plan_sections (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    icon_name TEXT NOT NULL,
    color TEXT NOT NULL,
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert the predefined safety plan sections
INSERT INTO public.safety_plan_sections (id, title, description, icon_name, color, sort_order) VALUES
('warning-signs', 'Warning Signs', 'Early indicators that I need to use my safety plan', 'AlertCircle', '#ef4444', 1),
('coping-strategies', 'Coping Strategies', 'Things I can do on my own to feel better', 'Heart', '#a855f7', 2),
('safe-places', 'Safe Places', 'Locations where I feel secure and calm', 'MapPin', '#10b981', 3),
('reasons-to-live', 'Reasons to Live', 'Things that give my life meaning and purpose', 'Shield', '#3b82f6', 4);

-- ===================================
-- 3. SAFETY PLAN ITEMS TABLE
-- ===================================
-- Individual items within each section of a user's safety plan
CREATE TABLE public.safety_plan_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    section_id TEXT REFERENCES public.safety_plan_sections(id) ON DELETE CASCADE NOT NULL,
    content TEXT NOT NULL,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Ensure user can only have items in valid sections
    CONSTRAINT valid_section_user UNIQUE(user_id, section_id, content)
);

-- ===================================
-- 4. SAFETY PLAN CONTACTS TABLE
-- ===================================
-- Support contacts for user's safety plan
CREATE TABLE public.safety_plan_contacts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    name TEXT NOT NULL,
    relationship TEXT,
    phone TEXT NOT NULL,
    email TEXT,
    available_hours TEXT,
    is_emergency_contact BOOLEAN DEFAULT false,
    is_professional BOOLEAN DEFAULT false, -- therapist, doctor, etc.
    notes TEXT,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ===================================
-- 5. INDEXES FOR PERFORMANCE
-- ===================================
CREATE INDEX idx_safety_plans_user_id ON public.safety_plans(user_id);
CREATE INDEX idx_safety_plan_items_user_id ON public.safety_plan_items(user_id);
CREATE INDEX idx_safety_plan_items_section ON public.safety_plan_items(section_id);
CREATE INDEX idx_safety_plan_items_user_section ON public.safety_plan_items(user_id, section_id);
CREATE INDEX idx_safety_plan_contacts_user_id ON public.safety_plan_contacts(user_id);
CREATE INDEX idx_safety_plan_contacts_emergency ON public.safety_plan_contacts(user_id, is_emergency_contact);

-- ===================================
-- 6. ROW LEVEL SECURITY (RLS)
-- ===================================
-- Enable RLS on all tables
ALTER TABLE public.safety_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.safety_plan_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.safety_plan_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.safety_plan_contacts ENABLE ROW LEVEL SECURITY;

-- Safety plan sections policies (readable by all authenticated users)
CREATE POLICY "Everyone can view safety plan sections" 
ON public.safety_plan_sections 
FOR SELECT 
USING (auth.uid() IS NOT NULL);

-- Safety plans policies (users can only access their own data)
CREATE POLICY "Users can view own safety plan" 
ON public.safety_plans 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own safety plan" 
ON public.safety_plans 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own safety plan" 
ON public.safety_plans 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own safety plan" 
ON public.safety_plans 
FOR DELETE 
USING (auth.uid() = user_id);

-- Safety plan items policies
CREATE POLICY "Users can view own safety plan items" 
ON public.safety_plan_items 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own safety plan items" 
ON public.safety_plan_items 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own safety plan items" 
ON public.safety_plan_items 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own safety plan items" 
ON public.safety_plan_items 
FOR DELETE 
USING (auth.uid() = user_id);

-- Safety plan contacts policies
CREATE POLICY "Users can view own safety plan contacts" 
ON public.safety_plan_contacts 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own safety plan contacts" 
ON public.safety_plan_contacts 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own safety plan contacts" 
ON public.safety_plan_contacts 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own safety plan contacts" 
ON public.safety_plan_contacts 
FOR DELETE 
USING (auth.uid() = user_id);

-- ===================================
-- 7. UPDATED_AT TRIGGER FUNCTION
-- ===================================
-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION handle_safety_plan_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply triggers to all tables
CREATE TRIGGER safety_plans_updated_at
  BEFORE UPDATE ON public.safety_plans
  FOR EACH ROW
  EXECUTE FUNCTION handle_safety_plan_updated_at();

CREATE TRIGGER safety_plan_sections_updated_at
  BEFORE UPDATE ON public.safety_plan_sections
  FOR EACH ROW
  EXECUTE FUNCTION handle_safety_plan_updated_at();

CREATE TRIGGER safety_plan_items_updated_at
  BEFORE UPDATE ON public.safety_plan_items
  FOR EACH ROW
  EXECUTE FUNCTION handle_safety_plan_updated_at();

CREATE TRIGGER safety_plan_contacts_updated_at
  BEFORE UPDATE ON public.safety_plan_contacts
  FOR EACH ROW
  EXECUTE FUNCTION handle_safety_plan_updated_at();

-- ===================================
-- 8. HELPFUL VIEWS FOR ANALYTICS
-- ===================================
-- View for complete safety plan with all components
CREATE OR REPLACE VIEW public.complete_safety_plans AS
SELECT 
  sp.user_id,
  sp.id as plan_id,
  sp.created_at as plan_created_at,
  sp.updated_at as plan_updated_at,
  sp.last_reviewed_at,
  sp.is_shared_with_therapist,
  sp.therapist_email,
  sp.notes as plan_notes,
  
  -- Count of items per section
  (SELECT COUNT(*) FROM safety_plan_items WHERE user_id = sp.user_id AND section_id = 'warning-signs') as warning_signs_count,
  (SELECT COUNT(*) FROM safety_plan_items WHERE user_id = sp.user_id AND section_id = 'coping-strategies') as coping_strategies_count,
  (SELECT COUNT(*) FROM safety_plan_items WHERE user_id = sp.user_id AND section_id = 'safe-places') as safe_places_count,
  (SELECT COUNT(*) FROM safety_plan_items WHERE user_id = sp.user_id AND section_id = 'reasons-to-live') as reasons_to_live_count,
  
  -- Total counts
  (SELECT COUNT(*) FROM safety_plan_items WHERE user_id = sp.user_id) as total_items,
  (SELECT COUNT(*) FROM safety_plan_contacts WHERE user_id = sp.user_id) as total_contacts,
  (SELECT COUNT(*) FROM safety_plan_contacts WHERE user_id = sp.user_id AND is_emergency_contact = true) as emergency_contacts_count
FROM public.safety_plans sp;

-- View for safety plan completeness metrics
CREATE OR REPLACE VIEW public.safety_plan_completeness AS
SELECT 
  user_id,
  CASE 
    WHEN total_items >= 10 AND total_contacts >= 2 THEN 'Complete'
    WHEN total_items >= 5 AND total_contacts >= 1 THEN 'Partial'
    ELSE 'Incomplete'
  END as completeness_status,
  ROUND(
    (LEAST(total_items, 10) * 0.7 + LEAST(total_contacts, 5) * 0.3) * 10, 1
  ) as completeness_score,
  warning_signs_count > 0 as has_warning_signs,
  coping_strategies_count > 0 as has_coping_strategies,
  safe_places_count > 0 as has_safe_places,
  reasons_to_live_count > 0 as has_reasons_to_live,
  emergency_contacts_count > 0 as has_emergency_contacts,
  last_reviewed_at,
  EXTRACT(DAYS FROM (NOW() - last_reviewed_at)) as days_since_review
FROM public.complete_safety_plans;

-- ===================================
-- 9. SAMPLE DATA FOR TESTING
-- ===================================
-- Function to create sample safety plan for a user
CREATE OR REPLACE FUNCTION create_sample_safety_plan(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
  -- Create the safety plan
  INSERT INTO public.safety_plans (user_id) 
  VALUES (user_uuid)
  ON CONFLICT (user_id) DO NOTHING;
  
  -- Add sample items for each section
  INSERT INTO public.safety_plan_items (user_id, section_id, content, sort_order) VALUES
  (user_uuid, 'warning-signs', 'Feeling overwhelmed or hopeless', 1),
  (user_uuid, 'warning-signs', 'Isolating from friends and family', 2),
  (user_uuid, 'warning-signs', 'Changes in sleep patterns', 3),
  
  (user_uuid, 'coping-strategies', 'Take a walk in nature', 1),
  (user_uuid, 'coping-strategies', 'Practice deep breathing exercises', 2),
  (user_uuid, 'coping-strategies', 'Listen to calming music', 3),
  (user_uuid, 'coping-strategies', 'Write in my journal', 4),
  
  (user_uuid, 'safe-places', 'Local park near home', 1),
  (user_uuid, 'safe-places', 'Coffee shop on Main Street', 2),
  (user_uuid, 'safe-places', 'Public library', 3),
  
  (user_uuid, 'reasons-to-live', 'My family and friends', 1),
  (user_uuid, 'reasons-to-live', 'Future goals and dreams', 2),
  (user_uuid, 'reasons-to-live', 'Helping others', 3)
  ON CONFLICT (user_id, section_id, content) DO NOTHING;
  
  -- Add sample contacts
  INSERT INTO public.safety_plan_contacts (user_id, name, relationship, phone, available_hours, is_emergency_contact) VALUES
  (user_uuid, 'Dr. Sarah Johnson', 'Therapist', '(555) 123-4567', 'Mon-Fri 9AM-5PM', false),
  (user_uuid, 'Emma', 'Best Friend', '(555) 987-6543', 'Anytime', true)
  ON CONFLICT DO NOTHING;
END;
$$ LANGUAGE plpgsql;

-- ===================================
-- 10. VERIFICATION QUERIES
-- ===================================
-- Check if setup was successful
SELECT 'Safety plan sections created' as status, COUNT(*) as count FROM public.safety_plan_sections;
SELECT 'Tables created successfully' as status;

-- Example usage queries (for testing):
-- SELECT * FROM public.safety_plan_sections ORDER BY sort_order;
-- SELECT * FROM public.complete_safety_plans WHERE user_id = auth.uid();
-- SELECT * FROM public.safety_plan_completeness WHERE user_id = auth.uid();

-- To create sample data for current user:
-- SELECT create_sample_safety_plan(auth.uid()); 