-- ===================================
-- EMOTIONS SYSTEM - DATABASE SETUP
-- ===================================
-- Run this script in your Supabase SQL Editor

-- Drop existing tables if they exist (for clean setup)
DROP TABLE IF EXISTS public.emotion_entries CASCADE;
DROP TABLE IF EXISTS public.emotion_types CASCADE;

-- ===================================
-- 1. EMOTION TYPES TABLE
-- ===================================
-- Stores the predefined emotion types with their properties
CREATE TABLE public.emotion_types (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    color TEXT NOT NULL, -- Hex color code
    icon_name TEXT NOT NULL, -- Icon identifier for frontend
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert the predefined emotion types
INSERT INTO public.emotion_types (id, name, description, color, icon_name, sort_order) VALUES
('calm', 'Calm', 'Peaceful and relaxed', '#10b981', 'Flower2', 1),
('happy', 'Happy', 'Joyful and content', '#f59e0b', 'Sun', 2),
('sad', 'Sad', 'Down or melancholic', '#3b82f6', 'CloudRain', 3),
('anxious', 'Anxious', 'Worried or nervous', '#a855f7', 'Zap', 4),
('peaceful', 'Peaceful', 'Serene and tranquil', '#06b6d4', 'Waves', 5),
('tired', 'Tired', 'Low energy or exhausted', '#6b7280', 'Moon', 6);

-- ===================================
-- 2. EMOTION ENTRIES TABLE
-- ===================================
-- Stores individual user emotion entries
CREATE TABLE public.emotion_entries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    emotion_type_id TEXT REFERENCES public.emotion_types(id) ON DELETE CASCADE NOT NULL,
    intensity INTEGER NOT NULL CHECK (intensity >= 1 AND intensity <= 10),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Optional metadata for future enhancements
    location TEXT, -- For future location tracking
    weather TEXT, -- For future weather correlation
    tags TEXT[], -- For future tagging system
    
    -- Index for better query performance
    CONSTRAINT valid_intensity CHECK (intensity BETWEEN 1 AND 10)
);

-- ===================================
-- 3. INDEXES FOR PERFORMANCE
-- ===================================
CREATE INDEX idx_emotion_entries_user_id ON public.emotion_entries(user_id);
CREATE INDEX idx_emotion_entries_created_at ON public.emotion_entries(created_at);
CREATE INDEX idx_emotion_entries_user_date ON public.emotion_entries(user_id, created_at);
CREATE INDEX idx_emotion_entries_emotion_type ON public.emotion_entries(emotion_type_id);

-- ===================================
-- 4. ROW LEVEL SECURITY (RLS)
-- ===================================
-- Enable RLS on both tables
ALTER TABLE public.emotion_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.emotion_entries ENABLE ROW LEVEL SECURITY;

-- Emotion types policies (readable by all authenticated users)
CREATE POLICY "Everyone can view emotion types" 
ON public.emotion_types 
FOR SELECT 
USING (auth.uid() IS NOT NULL);

-- Emotion entries policies (users can only access their own data)
CREATE POLICY "Users can view own emotion entries" 
ON public.emotion_entries 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own emotion entries" 
ON public.emotion_entries 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own emotion entries" 
ON public.emotion_entries 
FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own emotion entries" 
ON public.emotion_entries 
FOR DELETE 
USING (auth.uid() = user_id);

-- ===================================
-- 5. UPDATED_AT TRIGGER FUNCTION
-- ===================================
-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION handle_emotion_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to emotion_entries table
CREATE TRIGGER emotion_entries_updated_at
  BEFORE UPDATE ON public.emotion_entries
  FOR EACH ROW
  EXECUTE FUNCTION handle_emotion_updated_at();

-- Apply trigger to emotion_types table
CREATE TRIGGER emotion_types_updated_at
  BEFORE UPDATE ON public.emotion_types
  FOR EACH ROW
  EXECUTE FUNCTION handle_emotion_updated_at();

-- ===================================
-- 6. HELPFUL VIEWS FOR ANALYTICS
-- ===================================
-- View for daily emotion summaries
CREATE OR REPLACE VIEW public.daily_emotion_summary AS
SELECT 
  user_id,
  DATE(created_at) as entry_date,
  COUNT(*) as total_entries,
  ROUND(AVG(intensity), 1) as avg_intensity,
  ARRAY_AGG(DISTINCT emotion_type_id) as emotions_felt,
  MAX(created_at) as last_entry_time
FROM public.emotion_entries
GROUP BY user_id, DATE(created_at)
ORDER BY entry_date DESC;

-- View for weekly emotion trends
CREATE OR REPLACE VIEW public.weekly_emotion_trends AS
SELECT 
  user_id,
  DATE_TRUNC('week', created_at) as week_start,
  emotion_type_id,
  COUNT(*) as entry_count,
  ROUND(AVG(intensity), 1) as avg_intensity,
  MIN(intensity) as min_intensity,
  MAX(intensity) as max_intensity
FROM public.emotion_entries
GROUP BY user_id, DATE_TRUNC('week', created_at), emotion_type_id
ORDER BY week_start DESC, emotion_type_id;

-- ===================================
-- 7. VERIFICATION QUERIES
-- ===================================
-- Check if setup was successful
SELECT 'Emotion types created' as status, COUNT(*) as count FROM public.emotion_types;
SELECT 'Tables created successfully' as status;

-- Example usage queries (for testing):
-- SELECT * FROM public.emotion_types ORDER BY sort_order;
-- SELECT * FROM public.emotion_entries WHERE user_id = auth.uid() ORDER BY created_at DESC LIMIT 10; 